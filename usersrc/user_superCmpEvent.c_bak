/*****************************************************************/
/* COmPACT user routine: user_superCmpEvent(superCmpEvent *sevt) */
/*                                                               */
/* User routine called everytime an event `*sevt' is             */
/* loaded. A return value of greater than zero denotes           */
/* an error condition has occured.                               */
/*                                     BH 13/2/98    RWM 20/6/97 */
/*****************************************************************/

#include <math.h>
#include "cmpio.h"
#include "user.h"
#include "reader.h"
#include <constants.h>


int user_superCmpEvent(superBurst *sbur,superCmpEvent *sevt) {
  /* WARNING: do not alter things before this line */
  /*---------- Add user C code here ----------*/
  static int nuserevt=0;
  int  a, i, j, k;
  int  l, m, n;

  if(nuserevt<20) 
    {
      printSuperCmpEvent(sevt,fprt);
    }
  
  nuserevt++;
  //printf ("testVariable = %f\n", testVariable);
  //testVariable++;
  
  //##########################################################
  // Cut definitions
  //##########################################################
  //
  // vertex
  static float min_zvertex = -2500.0;             // min. zvertex position (in cm)
  static float max_zvertex = +9000.0;             // max. zvertex position (in cm)
  static float max_cda      = +3.5;               // max. CDA vertex (in cm)
  static float max_xyVtxRadius = +1.5;            // max. xy vertex radius (in cm)
  static float max_diff_zvtx = +300.0;            // max. difference between neutral and charged vertex (in cm)
  //
  // detector acceptance
  static float muv_box_min = 12.5;                // min. MUV track x/y
  static  float muv_box_max = 135.0;               // max. MUV track x/y
  static float hod_box_min = 0.0;                 // min. HOD track x/y
  static float hod_box_max = 130.0;               // max. HOD track x/y   AW 090903: war 1300.0
  static float min_deadcell_distance = 2.0;       // min. cluster distance to dead cell
  static float lkr_radius_min = 15.0;             // min. LKR track radius
  static float lkr_radius_max = 120.0;            // max. LKR track radius  AW 090903: war 1100.0
  static float hod_radius_min = 14.0;             // min. HOD track radius
  static float hod_radius_max = 115.0;            // max. HOD track radius
  static float dch1_radius_min = 12.0;            // min. DCH1 track radius   !!! different values for DCH1 and DCH4 ab v61
  static float dch4_radius_min = 14.0;            // min. DCH4 track radius
  static float dch_radius_max = 115.0;            // max. DCH track radius  v09
  static float dist_LKr_acc = 8.0;                // distance parameter handed to function LKr_acc.c
  //
  // track + cluster parameters
  static float p_track_min = +13.0;               // min. track momentum
  static float p_track_max = +65.0;               // max. track momentum
  static float track_quality_min = 0.7;           // track quality
  static float timediff_track_pi0_max = +4.0;     // max. time difference between track + pi0
  static float timediff_track_dchOffset_max = +20.0; // max. time difference between track and DCH offset
  static float timediff_gg_max = +2.0;            // max. time difference between two gammas
  static float egamma_min = 0.0;                  // min. gamma energy         
  static float dist_track_pi0Cluster_min = 10.0;  // min. distance between track and two pi0 clusters
  //
  // criteria to select Ke3c
  static float diff_pipi0_kaonMass_min = 0.020;   // min. difference between pi+pi0 mass and kaon mass
  static float ptSq_min = 0.004;                  // min. pt^2
  static float etot_max = 67.0;                   // max. Etot = ptrack + pi0 energy  
  // Missing Mass2 cut values (p-dependent, in GeV*10^{-3}) --> left/right asymmetric, ala ke2 v53, see mail Evgueni 15.03.10
  static double Mmiss2_min[10] = {-16,-14,-13,-13,-13,-13,-13,-14,-15,-16};
  static double Mmiss2_max[10] = {13,11,10,10,10,10,10,11,13,14};   
  //static float Mmiss2_max = 0.015;                // max. missing mass^2 (electron track assumed)
  static float Mmiss3_max = -0.004;               // max. missing mass^2 (pion track assumed)
  static float eop_min = 0.95;                    // low E/p criterion     
  static float eop_max = 1.10;                    // high E/p criterion
  //
  // definitions of particle masses (from PDG 2006)
  static double massElec = 0.000510998918;
  static double massMuon = 0.105658369;
  static double massPionC = 0.13957018;
  static double massKaonC = 0.493677;
  //##########################################################
  // End of Cut definitions
  //##########################################################
  
  int    ntrack = sevt->Ntrack; // number of tracks
  double eop_track;             // E/p for the track
  double p_track, e_track;      // momentum and energy of the track
  int    clui_track;            // cluster index associated to the track

  printf ("Ntrack = %i\n", ntrack);
  	
  for (i=0; i<ntrack; i++)
    {      
      p_track    = sevt->track[i].p;
      clui_track = sevt->track[i].iClus;
      if (clui_track >= 0) {	    
	
	if (IS_DATA)                                    // ab v65 Korrekturen automatisch separat für jede (Sub-) Periode
	  e_track = sevt->cluster[clui_track].energy / EopCorr[periodFlag][CPDindex][CELLindex];  // Ke3 E/p-Korrektur für jede Zelle!!!
	else
	  e_track = sevt->cluster[clui_track].energy;
	
	eop_track  = e_track / p_track;
      }
      else {
	e_track    = -1.;
	eop_track  = e_track / p_track;
      }
      
      //###########################################################################################################
      
      //////////////////////////////////////////////////////////////////////////
      //                                                                      //
      //                         allgemeine cuts                              //
      //                                                                      //
      //////////////////////////////////////////////////////////////////////////
      
      //-------//
      // cut01 // 
      //-------//
      
      cut01_eop->Fill(eop_track);
      cut01_eop_vs_p->Fill(eop_track,p_track);
      cut01_p->Fill(p_track);
    }
  
  /*----------- End of user C code -----------*/
  return 0;
}
